import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import win32com.client
import os
import threading

def browse_file():
    filepath = filedialog.askopenfilename(
        filetypes=[("PowerPoint Files", "*.pptx")]
    )
    entry_file_path.delete(0, tk.END)
    entry_file_path.insert(0, filepath)

def load_presentation():
    ppt_path = entry_file_path.get()
    if not ppt_path:
        messagebox.showerror("Error", "Please select a PowerPoint file.")
        return None
    return os.path.abspath(ppt_path)

def update_embedded_excel_no_open(ppt_file, data_sets, progress_var):
    try:
        # Initialize PowerPoint application
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        presentation = powerpoint.Presentations.Open(ppt_file, ReadOnly=False)

        data_index = 0  # Index for the current data set
        total_shapes = sum(1 for slide in presentation.Slides for shape in slide.Shapes if shape.HasChart)

        # Iterate through all slides and shapes
        for slide in presentation.Slides:
            if data_index >= len(data_sets):
                break  # Stop if all data sets have been applied

            for shape in slide.Shapes:
                if shape.HasChart:
                    chart = shape.Chart
                    # Access embedded Excel without opening it
                    chart_data = chart.ChartData
                    workbook = chart_data.Workbook
                    worksheet = workbook.Worksheets(1)

                    # Update values in the embedded Excel
                    data_lines = data_sets[data_index]
                    for i, row_data in enumerate(data_lines):
                        if i < 3:  # Update only rows 2 to 4
                            for j in range(4):  # Update only columns 1 to 4
                                cell = worksheet.Cells(i + 2, j + 1)  # Adjust for proper row/column indexing
                                cell.Value = row_data[j]

                                # Apply conditional formatting
                                if j > 0:  # Columns 2 to 4
                                    try:
                                        value = float(row_data[j].strip('%'))  # Remove percentage sign and convert to float
                                        if value > 85:
                                            cell.Font.Color = 0xFF0000  # Red for values > 85%
                                            worksheet.Cells(i + 2, 1).Font.Color = 0xFF0000  # Also change column 1 to red
                                        elif j == 3 and value < 85:
                                            cell.Font.Color = 0xFFFF00  # Yellow for column 4 values < 85%
                                    except ValueError:
                                        if j == 3:
                                            cell.Font.Color = 0xFFFF00  # Yellow for non-numeric values in column 4

                    # Refresh the chart to reflect updated data
                    chart.Refresh()

                    # Update progress bar
                    data_index += 1
                    progress_var.set((data_index / total_shapes) * 100)
                    progress_bar.update()

                    if data_index >= len(data_sets):
                        break  # Stop if all data sets have been applied

        # Save and close the PowerPoint presentation
        presentation.Save()
        presentation.Close()
        powerpoint.Quit()

        messagebox.showinfo("Success", "Excel values updated and charts refreshed successfully.")

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while updating chart data: {e}")

    finally:
        # Reset the progress bar
        progress_var.set(0)
        progress_bar.update()

def apply_excel_replacements():
    ppt_file = load_presentation()
    if not ppt_file:
        return

    try:
        data_lines = entry_excel_data.get("1.0", tk.END).strip().splitlines()
        data_sets = []
        current_set = []

        for line in data_lines:
            if line.strip():
                values = line.split()
                if len(values) == 4:
                    current_set.append(values)
                else:
                    messagebox.showerror("Error", "Each line must contain exactly four values.")
                    return
                if len(current_set) == 3:
                    data_sets.append(current_set)
                    current_set = []

        if current_set:
            messagebox.showerror("Error", "Each data set must contain exactly three lines.")
            return

        if not data_sets:
            messagebox.showerror("Error", "No valid data sets provided.")
            return

        # Run the update process in a separate thread
        update_thread = threading.Thread(target=update_embedded_excel_no_open, args=(ppt_file, data_sets, progress_var))
        update_thread.start()

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while processing the input: {e}")

# Initialize the main window
root = tk.Tk()
root.title("PowerPoint Embedded Excel Replacer")

# Set up the notebook (tabs)
notebook = ttk.Notebook(root)
notebook.grid(row=0, column=0, padx=10, pady=10)

# Tab for Embedded Excel Replacement
tab_excel = ttk.Frame(notebook)
notebook.add(tab_excel, text="Embedded Excel Replacement")

# File selection for Embedded Excel Replacement
tk.Label(tab_excel, text="Select PowerPoint File:").grid(row=0, column=0, padx=10, pady=5)
entry_file_path = tk.Entry(tab_excel, width=50)
entry_file_path.grid(row=0, column=1, padx=10, pady=5)
tk.Button(tab_excel, text="Browse", command=browse_file).grid(row=0, column=2, padx=10, pady=5)

# Input area for Excel data replacement
tk.Label(tab_excel, text="Input Values (4 values per line, 3 lines per set):").grid(row=1, column=0, padx=10, pady=5)
entry_excel_data = tk.Text(tab_excel, width=50, height=20)
entry_excel_data.grid(row=2, column=0, columnspan=2, padx=10, pady=5)

# Progress bar
progress_var = tk.DoubleVar()
progress_bar = ttk.Progressbar(root, variable=progress_var, maximum=100)
progress_bar.grid(row=3, column=0, padx=10, pady=10, sticky="we")

# Button to apply the Excel replacements
tk.Button(root, text="Apply Excel Replacements", command=apply_excel_replacements).grid(row=4, column=0, padx=10, pady=20)

# Start the Tkinter main loop
root.mainloop()
