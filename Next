import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from pptx import Presentation
from pptx.enum.shapes import MSO_SHAPE_TYPE
import win32com.client

def browse_file():
    filepath = filedialog.askopenfilename(
        filetypes=[("PowerPoint Files", "*.pptx")]
    )
    entry_file_path.delete(0, tk.END)
    entry_file_path.insert(0, filepath)

def add_default_replacements():
    entry_replacements.delete("1.0", tk.END)
    for i in range(1, 91):
        old_text = f"SAW{i:02}"
        entry_replacements.insert(tk.END, f"{old_text} -> \n")

def load_presentation():
    ppt_path = entry_file_path.get()
    if not ppt_path:
        messagebox.showerror("Error", "Please select a PowerPoint file.")
        return None
    return Presentation(ppt_path)

def apply_saw_replacements(prs):
    try:
        replacement_lines = entry_replacements.get("1.0", tk.END).strip().splitlines()
        replacements.clear()

        for i, line in enumerate(replacement_lines):
            old_text = f"SAW{i+1:02}"
            if '->' in line:
                _, new_text = line.split('->')
                new_text = new_text.strip()
                replacements[old_text] = new_text
            else:
                replacements[old_text] = line.strip()

        for slide in prs.slides:
            for shape in slide.shapes:
                process_shape(shape)
        messagebox.showinfo("Success", "SAW replacements applied.")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def process_shape(shape):
    if shape.shape_type == MSO_SHAPE_TYPE.GROUP:
        for s in shape.shapes:
            process_shape(s)
    elif shape.has_text_frame:
        text_frame = shape.text_frame
        replace_text_in_text_frame(text_frame)

    if shape.has_table:
        table = shape.table
        for row in table.rows:
            for cell in row.cells:
                text_frame = cell.text_frame
                replace_text_in_text_frame(text_frame)

def replace_text_in_text_frame(text_frame):
    if text_frame is not None:
        for paragraph in text_frame.paragraphs:
            full_text = ''.join([run.text for run in paragraph.runs])
            for old_text, new_text in replacements.items():
                if old_text in full_text:
                    full_text = full_text.replace(old_text, new_text)
                    for run in paragraph.runs:
                        run.text = ''
                    paragraph.runs[0].text = full_text

def search_and_replace_value(prs, search_value, replacement_value):
    for slide in prs.slides:
        for shape in slide.shapes:
            if shape.has_table:
                table = shape.table
                for row in table.rows:
                    for cell in row.cells:
                        if search_value in cell.text:
                            text_frame = cell.text_frame
                            for paragraph in text_frame.paragraphs:
                                for run in paragraph.runs:
                                    if search_value in run.text:
                                        start = run.text.find(search_value)
                                        end = start + len(search_value)
                                        run.text = run.text[:start] + replacement_value + run.text[end:]
                                        return

def apply_combined_replacements(prs):
    try:
        replacement_lines = entry_combined.get("1.0", tk.END).strip().splitlines()

        for line in replacement_lines:
            try:
                value_31, value_53, value_83 = line.split()
                search_and_replace_value(prs, "31.77%", value_31)
                search_and_replace_value(prs, "53.07%", value_53)
                search_and_replace_value(prs, "83.07%", value_83)
            except ValueError:
                messagebox.showerror("Error", "Each line must contain exactly three values separated by spaces.")
                return

        messagebox.showinfo("Success", "Combined replacements applied.")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def update_chart_data(ppt_file, data_lines):
    try:
        powerpoint = win32com.client.Dispatch("PowerPoint.Application")
        presentation = powerpoint.Presentations.Open(ppt_file)
        excel_app = win32com.client.Dispatch("Excel.Application")

        for slide in presentation.Slides:
            for shape in slide.Shapes:
                if shape.HasChart:
                    chart = shape.Chart
                    chart.ChartData.Activate()
                    
                    # Access embedded Excel
                    workbook = excel_app.Workbooks(chart.ChartData.Workbook.FullName)
                    worksheet = workbook.Worksheets(1)

                    # Update the worksheet with data
                    for i, row_data in enumerate(data_lines):
                        if i < 3:  # Process only the second, third, and fourth rows
                            for j in range(4):  # Update only the first four columns
                                value = row_data[j]
                                cell = worksheet.Cells[i + 2, j + 1]  # Adjust for proper row/column indexing
                                if j == 0:
                                    cell.Value = value
                                    cell.NumberFormat = 'mmm-yy'
                                elif 1 <= j <= 3:
                                    cell.Value = float(value) / 100
                                    cell.NumberFormat = '0.00%'

                    workbook.Save()
                    workbook.Close()
                    excel_app.Quit()

        presentation.Save()
        presentation.Close()
        powerpoint.Quit()

        messagebox.showinfo("Success", "Chart data updated.")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while updating chart data: {e}")

def apply_all_replacements():
    prs = load_presentation()
    if prs:
        apply_saw_replacements(prs)
        apply_combined_replacements(prs)

        # Extract Excel data and apply replacements
        excel_lines = entry_excel.get("1.0", tk.END).strip().splitlines()
        input_data = [line.split() for line in excel_lines]
        update_chart_data(entry_file_path.get(), input_data)

        save_changes(prs)

def save_changes(prs):
    if prs:
        save_path = filedialog.asksaveasfilename(
            defaultextension=".pptx", filetypes=[("PowerPoint Files", "*.pptx")]
        )
        if save_path:
            prs.save(save_path)
            messagebox.showinfo("Success", f"Changes saved to {save_path}")
    else:
        messagebox.showerror("Error", "No presentation loaded.")

# Initialize the replacements dictionary
replacements = {}

# Set up the main window
root = tk.Tk()
root.title("PowerPoint Text Replacer")

# Set up the notebook (tabs)
notebook = ttk.Notebook(root)
notebook.grid(row=0, column=0, padx=10, pady=10)

# First tab for SAW replacements
tab1 = ttk.Frame(notebook)
notebook.add(tab1, text="SAW Replacements")

# File selection for SAW Replacements
tk.Label(tab1, text="Select PowerPoint File:").grid(row=0, column=0, padx=10, pady=5)
entry_file_path = tk.Entry(tab1, width=50)
entry_file_path.grid(row=0, column=1, padx=10, pady=5)
tk.Button(tab1, text="Browse", command=browse_file).grid(row=0, column=2, padx=10, pady=5)

# Default replacement input for SAW Replacements
tk.Button(tab1, text="Load SAW01 to SAW90", command=add_default_replacements).grid(row=1, column=1, padx=10, pady=5)

# Replacement input area for SAW Replacements
tk.Label(tab1, text="Replacement Pairs (one per line):").grid(row=2, column=0, padx=10, pady=5)
entry_replacements = tk.Text(tab1, width=50, height=15)
entry_replacements.grid(row=2, column=1, padx=10, pady=5)

# Second tab for combined replacements
tab2 = ttk.Frame(notebook)
notebook.add(tab2, text="Combined Replacements")

# Input area for combined replacements
tk.Label(tab2, text="Enter combined values:").grid(row=0, column=0, padx=10, pady=5)
entry_combined = tk.Text(tab2, width=50, height=15)
entry_combined.grid(row=0, column=1, padx=10, pady=5)

# Third tab for Excel replacements
tab3 = ttk.Frame(notebook)
notebook.add(tab3, text="Excel Replacements")

# Input area for Excel replacements
tk.Label(tab3, text="Enter Excel Table Data (4 values per line):").grid(row=0, column=0, padx=10, pady=5)
entry_excel = tk.Text(tab3, width=50, height=10)
entry_excel.grid(row=1, column=0, padx=10, pady=5)

# Apply replacements button for all replacements
tk.Button(root, text="Apply All Replacements and Save", command=apply_all_replacements).grid(row=2, column=0, padx=10, pady=20)

# Start the Tkinter main loop
root.mainloop()
