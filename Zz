from pptx.oxml import parse_xml
from pptx.oxml.ns import nsdecls
from pptx.dml.color import RGBColor

def set_cell_border(cell, color=RGBColor(0, 0, 0), border_width=12700):
    """
    Sets borders for a given cell in a table.

    Parameters:
    cell (Cell): The table cell to which borders will be applied.
    color (RGBColor): The color of the border (default is black).
    border_width (int): The width of the border in EMUs (default is 12700 = 1pt).
    
    Returns:
    None: Modifies the cell's borders in place.
    """
    # Format the RGB values as a hex string
    color_hex = f"{color.rgb[0]:02X}{color.rgb[1]:02X}{color.rgb[2]:02X}"

    # Define the border XML structure with the formatted color
    border_xml = (
        f'<a:lnW w="{border_width}">'
        f'  <a:solidFill>'
        f'    <a:srgbClr val="{color_hex}" />'
        f'  </a:solidFill>'
        f'  <a:prstDash val="solid"/>'
        f'</a:lnW>'
    )

    tc = cell._tc  # Access the underlying XML of the table cell
    tcPr = tc.get_or_add_tcPr()  # Access the cell's properties

    # Apply the border to each side
    tcPr.append(parse_xml(f'<a:lnL {nsdecls("a")}>{border_xml}</a:lnL>'))  # Left border
    tcPr.append(parse_xml(f'<a:lnR {nsdecls("a")}>{border_xml}</a:lnR>'))  # Right border
    tcPr.append(parse_xml(f'<a:lnT {nsdecls("a")}>{border_xml}</a:lnT>'))  # Top border
    tcPr.append(parse_xml(f'<a:lnB {nsdecls("a")}>{border_xml}</a:lnB>'))  # Bottom border

def apply_borders_to_table(table):
    """
    Apply borders to all cells in a dynamically created table.

    Parameters:
    table: The table object created dynamically on the slide.
    """
    for row in table.rows:
        for cell in row.cells:
            set_cell_border(cell)  # Apply border to each cell

# Example usage within your existing loop for table creation:
table = slide['overview' + str(I)].shapes.add_table(rows=6, cols=6, x=0, y=0, cx=Inches(6), cy=Inches(4)).table

# Assuming you are looping through columns and rows to create cells:
for row_idx in range(6):  # Assuming 6 rows
    for col_idx in range(6):  # Assuming 6 columns
        cell = table.cell(row_idx, col_idx)
        # Here you can add data to the cell as you need, e.g., cell.text = "Data"
        set_cell_border(cell)  # Apply borders to each cell

# Alternatively, apply borders to the entire table:
apply_borders_to_table(table)
